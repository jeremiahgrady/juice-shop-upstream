name: Snyk Security Scan

on:
  push:
    branches:
      - main # Or your default branch, e.g., master
      # Add other branches you want to scan on push
      # - develop
  pull_request:
    branches:
      - main # Or your default branch
      # Add other branches you want to scan on pull request
      # - develop
  # Optional: Schedule daily scans
  # schedule:
  #   - cron: '30 5 * * 1-5' # Run at 05:30 UTC on weekdays

permissions:
  # Required to checkout the code
  contents: read
  # Required to upload SARIF results to the GitHub Security tab
  security-events: write
  # Depending on your specific Snyk action or setup, other permissions might be needed.
  # For instance, if your Snyk action interacts with packages or other services.
  # actions: read # Often a good default

jobs:
  snyk_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Run Snyk Scan
      # Replace 'snyk/actions/node@master' with the Snyk action for your project type.
      # Common Snyk actions:
      # - snyk/actions/node@master (for Node.js)
      # - snyk/actions/python@master (for Python)
      # - snyk/actions/java@master (for Maven, Gradle - check Snyk docs for specific Java actions)
      # - snyk/actions/golang@master (for Go)
      # - snyk/actions/docker@master (for Docker images)
      # - snyk/actions/iac@master (for Infrastructure as Code)
      #
      # If a dedicated action for your project type is not available or you need more control,
      # you can use 'snyk/actions/setup@master' to install the Snyk CLI,
      # and then add a 'run' step:
      # - name: Install Snyk CLI
      #   uses: snyk/actions/setup@master
      # - name: Run Snyk test
      #   run: snyk test --all-projects --sarif-file-output=snyk.sarif
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   continue-on-error: true # Important to allow SARIF upload even if vulns are found
      - name: Run Snyk to check for vulnerabilities
        # IMPORTANT: Replace with the correct Snyk action for your project and pin to a specific version.
        uses: snyk/actions/node@master # Example for a Node.js project
        continue-on-error: true # Ensures SARIF file is uploaded even if vulnerabilities are found
        env:
          # SNYK_TOKEN is necessary for Snyk to authenticate and for results to appear in your Snyk account.
          # It's also required for uploading SARIF to GitHub Advanced Security on private repos.
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          # 'test' is usually the default command for most Snyk actions.
          # command: test
          # Use '--all-projects' to scan all detectable projects in the repository.
          # '--sarif-file-output' tells Snyk to generate a SARIF file.
          args: --all-projects --detection-depth=5 --sarif-file-output=snyk.sarif
          # Some Snyk actions might have a dedicated 'sarif: true' input instead of using 'args'.
          # Check the specific Snyk action's documentation.
          # For snyk/actions/docker, you might use:
          #   image: 'your-docker-image-name'
          #   sarif: true # This will likely create snyk.sarif

      # Step 2: Upload SARIF file to GitHub Security tab
      # This step uploads the snyk.sarif file generated by the Snyk action.
      # GitHub Advanced Security must be enabled for the repository for this to work on private repos.
      - name: Upload Snyk SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        # This condition ensures that the SARIF upload step runs even if the Snyk scan step identifies vulnerabilities
        # (because 'continue-on-error: true' is set on the Snyk step).
        if: always() # You can also use `if: success() || failure()` which has a similar effect here.
        with:
          # Path to SARIF file (relative to the root of the repository).
          # Ensure the filename matches the one specified in the Snyk step's `args` or the one generated by the Snyk action.
          sarif_file: snyk.sarif
          # Optional: You can define a category for the Snyk alerts in the GitHub Security tab.
          # This helps differentiate alerts if you use multiple security tools.
          # category: snyk-${{ matrix.language }} # Example if using a matrix
